// EmailManager.gs - Email Communication System
// Handles all automated email communications

const EmailManager = {
  
  /**
   * Email template configurations
   */
  TEMPLATES: {
    RENT_REMINDER: {
      subject: 'Rent Reminder - {monthYear}',
      template: `<div style="font-family:Arial,sans-serif;">
        <p>Dear {tenantName},</p>
        <p>This is a friendly reminder that your rent payment of <strong>{rent}</strong> for Room {roomNumber} is <strong>{status}</strong> for {monthYear}.</p>
        <table style="border-collapse:collapse;margin:10px 0;">
          <tr><td style="padding:4px 8px;">Amount Due:</td><td style="padding:4px 8px;">{rent}</td></tr>
          <tr><td style="padding:4px 8px;">Due Date:</td><td style="padding:4px 8px;">{dueDate}</td></tr>
          {lateFeeRow}
        </table>
        <p>Payment Methods:</p>
        <ul>
          <li>Online: <a href="#">Payment Portal Link</a></li>
          <li>Check: Made payable to "{propertyName}"</li>
          <li>Cash: Deliver to management office with receipt</li>
        </ul>
        <p>If you have already made your payment, please disregard this message and contact us so we can update our records.</p>
        <p>Thank you for your prompt attention to this matter.</p>
        <p>Best regards,<br>{propertyName} Management<br>Email: {managerEmail}<br>Phone: [Property Phone Number]</p>
      </div>`
    },
    
    LATE_PAYMENT_ALERT: {
      subject: 'Late Payment Alert - {count} Tenant(s) Overdue',
      template: `<div style="font-family:Arial,sans-serif;">
        <p><strong>Property Manager Alert</strong></p>
        <p>The following {count} tenant(s) have overdue rent payments:</p>
        <ul>{overdueList}</ul>
        <p>Recommended Actions:</p>
        <ul>
          <li>Follow up with personal calls/visits</li>
          <li>Issue formal late payment notices</li>
          <li>Review payment plan options</li>
          <li>Consider escalation procedures if significantly overdue</li>
        </ul>
        <p>This automated alert was generated by the Parsonage Management System on {currentDate}.</p>
        <p>Please take appropriate action as soon as possible.</p>
        <p>System Administrator<br>{propertyName} Management System</p>
      </div>`
    },
    
    MONTHLY_INVOICE: {
      subject: 'Monthly Rent Invoice - {monthYear}',
      template: `<div style="font-family:Arial,sans-serif;">
        <p>Dear {tenantName},</p>
        <p>Please find attached your monthly rent invoice for {monthYear}.</p>
        <p>Your prompt payment by the due date is appreciated and helps us maintain our community.</p>
        <p>If you have any questions about your invoice or need to discuss payment arrangements, please don't hesitate to contact us.</p>
        <p>Thank you for being a valued resident.</p>
        <p>Best regards,<br>{propertyName} Management<br>Email: {managerEmail}</p>
      </div>`
    },
    
    WELCOME_EMAIL: {
      subject: 'Welcome to {propertyName}!',
      template: `Dear {tenantName},

Welcome to {propertyName}! We're delighted to have you as part of our community.

Your Move-In Details:
• Room Number: {roomNumber}
• Move-In Date: {moveInDate}
• Monthly Rent: {rent}

Important Information:
• Rent is due by the 5th of each month
• Late fees apply after {lateFeeDay} days
• Emergency contact: {managerEmail}

House Rules & Guidelines:
• Quiet hours: 10:00 PM - 7:00 AM
• Common areas should be kept clean and tidy
• No smoking inside the building
• Guests are welcome with prior notice
• Laundry schedule and kitchen use guidelines are posted

Community Resources:
• WiFi Network: [Network Name] | Password: [Password]
• Maintenance requests: Submit via our online form
• Community bulletin board: Check for updates and events
• Local area guide: Available in the common area

We're here to help make your stay comfortable and enjoyable. Please don't hesitate to reach out if you have any questions or concerns.

Welcome home!

Best regards,
{propertyName} Management Team
Email: {managerEmail}`
    },
    
    MOVE_OUT_CONFIRMATION: {
      subject: 'Move-Out Confirmation & Deposit Information',
      template: `Dear {tenantName},

This confirms your move-out from Room {roomNumber} on {moveOutDate}.

Security Deposit Summary:
• Original Deposit: {originalDeposit}
• Deductions: {deductions}
• Refund Amount: {depositRefund}

{deductionDetails}

Your deposit refund will be mailed to:
{forwardingAddress}

Please allow 7-10 business days for processing.

Thank you for being a valued resident of {propertyName}. We wish you all the best in your future endeavors!

If you have any questions about your deposit or need any documentation, please contact us.

Best regards,
{propertyName} Management
Email: {managerEmail}`
    },
    
    GUEST_BOOKING_CONFIRMATION: {
      subject: 'Booking Confirmation - {propertyName}',
      template: `Dear {guestName},

Thank you for booking with {propertyName}. Your reservation has been confirmed!

Booking Details:
• Booking ID: {bookingId}
• Room: {roomNumber}
• Check-in: {checkInDate} (after 3:00 PM)
• Check-out: {checkOutDate} (before 11:00 AM)
• Number of nights: {numberOfNights}
• Total guests: {numberOfGuests}
• Total amount: {totalAmount}

{specialRequests}

Check-in Instructions:
• Please arrive between 3:00 PM and 8:00 PM
• Bring a valid photo ID
• Payment is due at check-in if not already paid
• Use the main entrance and ring the bell

House Rules:
• Quiet hours: 10:00 PM - 7:00 AM
• No smoking in rooms
• Maximum occupancy must be respected
• Please keep common areas tidy

Amenities Included:
• Free WiFi
• Coffee and tea facilities
• Access to common areas
• Local area information

Cancellation Policy:
• Free cancellation up to 48 hours before check-in
• 50% charge for cancellations within 48 hours

We look forward to hosting you!

Best regards,
{propertyName} Guest Services
Email: {managerEmail}`
    },
    
    GUEST_WELCOME: {
      subject: 'Welcome to {propertyName}!',
      template: `Dear {guestName},

Welcome to {propertyName}! We hope you have a comfortable and enjoyable stay.

Your Stay Details:
• Room: {roomNumber}
• Check-out: {checkOutDate} (before 11:00 AM)

Important Information:
• WiFi: Network name and password are posted in your room
• Emergency contact: {managerEmail}
• Local emergency services: 911

During Your Stay:
• Fresh towels are available upon request
• Ice machine is located on the first floor
• Quiet hours are from 10:00 PM to 7:00 AM
• Please ensure your room door is locked when leaving

Local Recommendations:
• Restaurants and cafes within walking distance
• Public transportation information available at front desk
• Local attractions and maps in the common area

If you need anything during your stay or have any questions, please don't hesitate to contact us.

Enjoy your visit!

Best regards,
{propertyName} Guest Services
Email: {managerEmail}`
    },
    
    GUEST_CHECKOUT_CONFIRMATION: {
      subject: 'Thank You for Your Stay - {propertyName}',
      template: `Dear {guestName},

Thank you for choosing {propertyName} for your recent stay. We hope you had a comfortable and pleasant experience.

Stay Summary:
• Room: {roomNumber}
• Total Amount: {totalAmount}
• Amount Paid: {amountPaid}

We appreciate your business and would love to host you again in the future.

Guest Feedback:
We value your opinion! Please consider leaving us a review or sending feedback about your stay. Your comments help us improve our services.

Contact Information:
If you have any questions about your bill or left any items behind, please contact us at {managerEmail}.

Safe travels and we hope to see you again soon!

Best regards,
{propertyName} Guest Services
Email: {managerEmail}`
    },
    
    GUEST_CHECK_IN_REMINDER: {
      subject: 'Check-in Reminder - Tomorrow at {propertyName}',
      template: `Dear {guestName},

This is a friendly reminder that your check-in at {propertyName} is scheduled for tomorrow, {checkInDate}.

Check-in Details:
• Room: {roomNumber}
• Time: After 3:00 PM
• Location: Main entrance - ring the bell

Please Remember to Bring:
• Valid photo identification
• Payment (if not already completed)
• This confirmation email

Running Late?
If you expect to arrive after 8:00 PM, please contact us to arrange late check-in.

We look forward to welcoming you tomorrow!

Best regards,
{propertyName} Guest Services
Email: {managerEmail}
Phone: [Property Phone]`
    },
    
    MAINTENANCE_REQUEST_CONFIRMATION: {
      subject: 'Maintenance Request Received - #{requestId}',
      template: `Dear {requesterName},

We have received your maintenance request and assigned it ID #{requestId}.

Request Details:
• Location: {location}
• Issue Type: {issueType}
• Priority: {priority}
• Description: {description}

What Happens Next:
• We will assess your request within 24 hours
• For urgent matters, we will contact you directly
• You will be notified when work is scheduled
• A follow-up will be sent upon completion

Estimated Timeline:
• Emergency issues: Within 2 hours
• Urgent issues: Within 24 hours
• Standard requests: Within 3-5 business days

If this is an emergency (water leak, electrical hazard, security issue), please call our emergency line immediately.

Thank you for reporting this issue.

Best regards,
{propertyName} Maintenance Team
Email: {managerEmail}`
    }
  },
  
  /**
   * Send rent reminder email
   */
  sendRentReminder: function(email, data) {
    try {
      const template = this.TEMPLATES.RENT_REMINDER;

      const lateFeeRow = data.status === CONFIG.STATUS.PAYMENT.OVERDUE ?
        `<tr><td style="padding:4px 8px;">Late Fee:</td><td style="padding:4px 8px;">${Utils.formatCurrency(data.lateFee)}</td></tr>\n` +
        `<tr><td style="padding:4px 8px;">Total Due:</td><td style="padding:4px 8px;">${Utils.formatCurrency(parseFloat(data.rent) + data.lateFee)}</td></tr>`
        : '';

      const emailData = {
        ...data,
        propertyName: CONFIG.SYSTEM.PROPERTY_NAME,
        managerEmail: CONFIG.SYSTEM.MANAGER_EMAIL,
        lateFeeRow: lateFeeRow,
        rent: Utils.formatCurrency(data.rent)
      };

      const subject = this.processTemplate(template.subject, emailData);
      const html = this.processTemplate(template.template, emailData);
      const body = html.replace(/<[^>]*>/g, '');

      MailApp.sendEmail(email, subject, body, { htmlBody: html });
      Logger.log(`Rent reminder sent to: ${email}`);
      
    } catch (error) {
      Logger.log(`Failed to send rent reminder to ${email}: ${error.message}`);
      throw error;
    }
  },
  
  /**
   * Send late payment alert to manager
   */
  sendLatePaymentAlert: function(managerEmail, data) {
    try {
      const template = this.TEMPLATES.LATE_PAYMENT_ALERT;
      
      const overdueListText = data.overdueList.map(tenant =>
        `<li>${tenant.tenant} (Room ${tenant.room}, ${tenant.email}) - Last payment: ${tenant.lastPayment}</li>`
      ).join('');
      
      const emailData = {
        count: data.count,
        overdueList: overdueListText,
        currentDate: Utils.formatDate(new Date(), 'MMMM dd, yyyy'),
        propertyName: CONFIG.SYSTEM.PROPERTY_NAME
      };
      
      const subject = this.processTemplate(template.subject, emailData);
      const html = this.processTemplate(template.template, emailData);
      const body = html.replace(/<[^>]*>/g, '');

      MailApp.sendEmail(managerEmail, subject, body, { htmlBody: html });
      Logger.log(`Late payment alert sent to manager: ${managerEmail}`);
      
    } catch (error) {
      Logger.log(`Failed to send late payment alert: ${error.message}`);
      throw error;
    }
  },
  
  /**
   * Send monthly invoice
   */
  sendMonthlyInvoice: function(email, data, pdfAttachment) {
    try {
      const template = this.TEMPLATES.MONTHLY_INVOICE;
      
      const emailData = {
        ...data,
        propertyName: CONFIG.SYSTEM.PROPERTY_NAME,
        managerEmail: CONFIG.SYSTEM.MANAGER_EMAIL
      };
      
      const subject = this.processTemplate(template.subject, emailData);
      const html = this.processTemplate(template.template, emailData);
      const body = html.replace(/<[^>]*>/g, '');

      const mailOptions = {
        attachments: pdfAttachment ? [pdfAttachment] : [],
        htmlBody: html
      };

      MailApp.sendEmail(email, subject, body, mailOptions);
      Logger.log(`Monthly invoice sent to: ${email}`);
      
    } catch (error) {
      Logger.log(`Failed to send monthly invoice to ${email}: ${error.message}`);
      throw error;
    }
  },
  
  /**
   * Send welcome email to new tenant
   */
  sendWelcomeEmail: function(email, data) {
    try {
      const template = this.TEMPLATES.WELCOME_EMAIL;
      
      const emailData = {
        ...data,
        propertyName: CONFIG.SYSTEM.PROPERTY_NAME,
        managerEmail: CONFIG.SYSTEM.MANAGER_EMAIL,
        lateFeeDay: CONFIG.SYSTEM.LATE_FEE_DAYS,
        rent: Utils.formatCurrency(data.rent)
      };
      
      const subject = this.processTemplate(template.subject, emailData);
      const body = this.processTemplate(template.template, emailData);
      
      MailApp.sendEmail(email, subject, body);
      Logger.log(`Welcome email sent to: ${email}`);
      
    } catch (error) {
      Logger.log(`Failed to send welcome email to ${email}: ${error.message}`);
      throw error;
    }
  },
  
  /**
   * Send move-out confirmation
   */
  sendMoveOutConfirmation: function(email, data) {
    try {
      const template = this.TEMPLATES.MOVE_OUT_CONFIRMATION;
      
      const deductionDetails = data.deductions > 0 ? 
        `\nDeduction Details:\n${data.deductionReason || 'See attached itemized statement'}` : 
        '\nNo deductions were applied to your deposit.';
      
      const emailData = {
        ...data,
        propertyName: CONFIG.SYSTEM.PROPERTY_NAME,
        managerEmail: CONFIG.SYSTEM.MANAGER_EMAIL,
        originalDeposit: Utils.formatCurrency(data.depositRefund + data.deductions),
        deductions: Utils.formatCurrency(data.deductions),
        depositRefund: Utils.formatCurrency(data.depositRefund),
        deductionDetails: deductionDetails
      };
      
      const subject = this.processTemplate(template.subject, emailData);
      const body = this.processTemplate(template.template, emailData);
      
      MailApp.sendEmail(email, subject, body);
      Logger.log(`Move-out confirmation sent to: ${email}`);
      
    } catch (error) {
      Logger.log(`Failed to send move-out confirmation to ${email}: ${error.message}`);
      throw error;
    }
  },
  
  /**
   * Send guest booking confirmation
   */
  sendGuestBookingConfirmation: function(email, data) {
    try {
      const template = this.TEMPLATES.GUEST_BOOKING_CONFIRMATION;
      
      const specialRequests = data.specialRequests ? 
        `\nSpecial Requests Noted:\n${data.specialRequests}\n` : '';
      
      const emailData = {
        ...data,
        propertyName: CONFIG.SYSTEM.PROPERTY_NAME,
        managerEmail: CONFIG.SYSTEM.MANAGER_EMAIL,
        totalAmount: Utils.formatCurrency(data.totalAmount),
        specialRequests: specialRequests
      };
      
      const subject = this.processTemplate(template.subject, emailData);
      const body = this.processTemplate(template.template, emailData);
      
      MailApp.sendEmail(email, subject, body);
      Logger.log(`Guest booking confirmation sent to: ${email}`);
      
    } catch (error) {
      Logger.log(`Failed to send guest booking confirmation to ${email}: ${error.message}`);
      throw error;
    }
  },
  
  /**
   * Send guest welcome email
   */
  sendGuestWelcome: function(email, data) {
    try {
      const template = this.TEMPLATES.GUEST_WELCOME;
      
      const emailData = {
        ...data,
        propertyName: CONFIG.SYSTEM.PROPERTY_NAME,
        managerEmail: CONFIG.SYSTEM.MANAGER_EMAIL
      };
      
      const subject = this.processTemplate(template.subject, emailData);
      const body = this.processTemplate(template.template, emailData);
      
      MailApp.sendEmail(email, subject, body);
      Logger.log(`Guest welcome email sent to: ${email}`);
      
    } catch (error) {
      Logger.log(`Failed to send guest welcome email to ${email}: ${error.message}`);
      throw error;
    }
  },
  
  /**
   * Send guest checkout confirmation
   */
  sendGuestCheckoutConfirmation: function(email, data) {
    try {
      const template = this.TEMPLATES.GUEST_CHECKOUT_CONFIRMATION;
      
      const emailData = {
        ...data,
        propertyName: CONFIG.SYSTEM.PROPERTY_NAME,
        managerEmail: CONFIG.SYSTEM.MANAGER_EMAIL,
        totalAmount: Utils.formatCurrency(data.totalAmount),
        amountPaid: Utils.formatCurrency(data.amountPaid)
      };
      
      const subject = this.processTemplate(template.subject, emailData);
      const body = this.processTemplate(template.template, emailData);
      
      MailApp.sendEmail(email, subject, body);
      Logger.log(`Guest checkout confirmation sent to: ${email}`);
      
    } catch (error) {
      Logger.log(`Failed to send guest checkout confirmation to ${email}: ${error.message}`);
      throw error;
    }
  },
  
  /**
   * Send guest check-in reminder
   */
  sendGuestCheckInReminder: function(email, data) {
    try {
      const template = this.TEMPLATES.GUEST_CHECK_IN_REMINDER;
      
      const emailData = {
        ...data,
        propertyName: CONFIG.SYSTEM.PROPERTY_NAME,
        managerEmail: CONFIG.SYSTEM.MANAGER_EMAIL
      };
      
      const subject = this.processTemplate(template.subject, emailData);
      const body = this.processTemplate(template.template, emailData);
      
      MailApp.sendEmail(email, subject, body);
      Logger.log(`Guest check-in reminder sent to: ${email}`);
      
    } catch (error) {
      Logger.log(`Failed to send guest check-in reminder to ${email}: ${error.message}`);
      throw error;
    }
  },
  
  /**
   * Send maintenance request confirmation
   */
  sendMaintenanceConfirmation: function(email, data) {
    try {
      const template = this.TEMPLATES.MAINTENANCE_REQUEST_CONFIRMATION;
      
      const emailData = {
        ...data,
        propertyName: CONFIG.SYSTEM.PROPERTY_NAME,
        managerEmail: CONFIG.SYSTEM.MANAGER_EMAIL
      };
      
      const subject = this.processTemplate(template.subject, emailData);
      const body = this.processTemplate(template.template, emailData);
      
      MailApp.sendEmail(email, subject, body);
      Logger.log(`Maintenance confirmation sent to: ${email}`);
      
    } catch (error) {
      Logger.log(`Failed to send maintenance confirmation to ${email}: ${error.message}`);
      throw error;
    }
  },
  
  /**
   * Process email template with data substitution
   */
  processTemplate: function(template, data) {
    let processed = template;
    
    Object.keys(data).forEach(key => {
      const placeholder = `{${key}}`;
      const value = data[key] || '';
      processed = processed.replace(new RegExp(placeholder, 'g'), value);
    });
    
    return processed;
  },
  
  /**
   * Send test email
   */
  sendTestEmail: function() {
    try {
      const testEmail = CONFIG.SYSTEM.MANAGER_EMAIL;
      const subject = `Test Email - ${CONFIG.SYSTEM.PROPERTY_NAME} Management System`;
      const body = `This is a test email from your Parsonage Management System.

System Information:
• Property: ${CONFIG.SYSTEM.PROPERTY_NAME}
• Timestamp: ${new Date().toLocaleString()}
• System Version: 2.0

If you received this email, your email system is working correctly!

Best regards,
Parsonage Management System`;
      
      MailApp.sendEmail(testEmail, subject, body);
      
      SpreadsheetApp.getUi().alert(
        'Test Email Sent',
        `A test email has been sent to ${testEmail}. Please check your inbox.`,
        SpreadsheetApp.getUi().ButtonSet.OK
      );
      
    } catch (error) {
      SpreadsheetApp.getUi().alert(
        'Email Error',
        `Failed to send test email: ${error.message}`,
        SpreadsheetApp.getUi().ButtonSet.OK
      );
    }
  },
  
  /**
   * Configure email templates (show current templates)
   */
  configureEmailTemplates: function() {
    const html = HtmlService.createHtmlOutput(`
      <div style="font-family: Arial, sans-serif; padding: 20px; line-height: 1.6;">
        <h2>📧 Email Template Configuration</h2>
        
        <p>The system uses the following automated email templates:</p>
        
        <div style="margin: 20px 0;">
          <h3>🏠 Tenant Communications</h3>
          <ul>
            <li><strong>Rent Reminder:</strong> Monthly payment reminders</li>
            <li><strong>Late Payment Alert:</strong> Manager notifications for overdue payments</li>
            <li><strong>Monthly Invoice:</strong> PDF invoice attachments</li>
            <li><strong>Welcome Email:</strong> New tenant orientation</li>
            <li><strong>Move-Out Confirmation:</strong> Deposit return information</li>
          </ul>
        </div>
        
        <div style="margin: 20px 0;">
          <h3>🛏️ Guest Communications</h3>
          <ul>
            <li><strong>Booking Confirmation:</strong> Reservation details and instructions</li>
            <li><strong>Check-in Reminder:</strong> Day-before arrival reminders</li>
            <li><strong>Welcome Message:</strong> On-arrival guest information</li>
            <li><strong>Checkout Confirmation:</strong> Stay summary and thank you</li>
          </ul>
        </div>
        
        <div style="margin: 20px 0;">
          <h3>🔧 Maintenance Communications</h3>
          <ul>
            <li><strong>Request Confirmation:</strong> Maintenance request acknowledgment</li>
          </ul>
        </div>
        
        <h3>📝 Template Customization</h3>
        <p>To modify email templates:</p>
        <ol>
          <li>Open the EmailManager.gs file in the script editor</li>
          <li>Find the TEMPLATES object</li>
          <li>Edit the subject and template fields as needed</li>
          <li>Use {variableName} for dynamic content</li>
          <li>Save and test your changes</li>
        </ol>
        
        <div style="background: #e3f2fd; padding: 15px; border-radius: 8px; margin: 20px 0;">
          <h4>📋 Available Variables</h4>
          <p><strong>Universal:</strong> {propertyName}, {managerEmail}, {currentDate}</p>
          <p><strong>Tenant:</strong> {tenantName}, {roomNumber}, {rent}, {monthYear}</p>
          <p><strong>Guest:</strong> {guestName}, {checkInDate}, {checkOutDate}, {totalAmount}</p>
          <p><strong>Maintenance:</strong> {requestId}, {issueType}, {priority}, {description}</p>
        </div>
        
        <div style="text-align: center; margin-top: 30px;">
          <button onclick="google.script.run.sendTestEmail()" 
                  style="padding: 10px 20px; background: #4CAF50; color: white; border: none; border-radius: 4px;">
            Send Test Email
          </button>
        </div>
      </div>
    `)
      .setWidth(600)
      .setHeight(500);
    
    SpreadsheetApp.getUi().showModalDialog(html, 'Email Template Configuration');
  },
  
  /**
   * Validate email address format
   */
  validateEmail: function(email) {
    if (!email || typeof email !== 'string') {
      return false;
    }
    return Utils.isValidEmail(email);
  },
  
  /**
   * Send bulk emails with rate limiting
   */
  sendBulkEmails: function(emailList, subject, body, attachments = []) {
    const maxEmailsPerBatch = 100; // Gmail daily limit consideration
    let sentCount = 0;
    let failedCount = 0;
    
    try {
      for (let i = 0; i < emailList.length; i += maxEmailsPerBatch) {
        const batch = emailList.slice(i, i + maxEmailsPerBatch);
        
        batch.forEach(emailData => {
          try {
            if (this.validateEmail(emailData.email)) {
              const personalizedSubject = this.processTemplate(subject, emailData);
              const personalizedBody = this.processTemplate(body, emailData);
              
              MailApp.sendEmail(
                emailData.email,
                personalizedSubject,
                personalizedBody,
                { attachments: attachments }
              );
              sentCount++;
            } else {
              Logger.log(`Invalid email address: ${emailData.email}`);
              failedCount++;
            }
          } catch (error) {
            Logger.log(`Failed to send email to ${emailData.email}: ${error.message}`);
            failedCount++;
          }
        });
        
        // Rate limiting: pause between batches
        if (i + maxEmailsPerBatch < emailList.length) {
          Utilities.sleep(1000); // 1 second pause
        }
      }
      
      return {
        sent: sentCount,
        failed: failedCount,
        total: emailList.length
      };
      
    } catch (error) {
      Logger.log(`Bulk email error: ${error.message}`);
      throw error;
    }
  }
};

Logger.log('EmailManager module loaded successfully');
